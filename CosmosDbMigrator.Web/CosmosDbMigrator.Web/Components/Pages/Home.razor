@page "/"

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using CosmosDbMigrator.Web.Services
@using Microsoft.Azure.Cosmos
@inject NavigationManager NavigationManager
@inject CosmosDbService CosmosDbService

<h3>JSON to Cosmos Migration Tool</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<h4>Enter Cosmos DB Connection Properties</h4>

<div class="mb-3">
    <label for="endpointUri" class="form-label">Endpoint URI:</label>
    <input id="endpointUri" class="form-control" @bind="EndpointUri" />
</div>
<div class="mb-3">
    <label for="primaryKey" class="form-label">Primary Key:</label>
    <input id="primaryKey" class="form-control" @bind="PrimaryKey" type="password" />
</div>

<button class="btn btn-primary" @onclick="ConnectToCosmosDb">Connect to Cosmos DB</button>

@if (IsConnected)
{
    <hr />

    @if (!string.IsNullOrEmpty(DeleteSuccessMessage))
    {
        <div class="alert alert-success">@DeleteSuccessMessage</div>
    }
    @if (!string.IsNullOrEmpty(DeleteErrorMessage))
    {
        <div class="alert alert-danger">@DeleteErrorMessage</div>
    }

    <h4 class="mt-4">Select Cosmos DB Database and Container</h4>

    <div class="mb-3">
        <label for="databaseSelect" class="form-label">Database:</label>
        <select id="databaseSelect" class="form-select" @bind="SelectedDatabase">
            <option value="">-- Select Database --</option>
            @foreach (var db in Databases)
            {
                <option value="@db">@db</option>
            }
        </select>
    </div>

    @if (Containers.Any())
    {
        <div class="mb-3">
            <label for="containerSelect" class="form-label">Container:</label>
            <select id="containerSelect" class="form-select" @bind="SelectedContainer">
                <option value="">-- Select Container --</option>
                @foreach (var container in Containers)
                {
                    <option value="@container">@container</option>
                }
            </select>
        </div>
    }


    @if (!string.IsNullOrEmpty(partitionKeyPath))
    {
        <div class="alert alert-info">
            Partition Key Path: <strong>@partitionKeyPath</strong>
        </div>
    }

    <button class="btn btn-danger" @onclick="DeleteAllItems" disabled="@(!CanDeleteItems)">Delete All Items in Container</button>

    @if (!string.IsNullOrEmpty(DeleteSuccessMessage))
    {
        <div class="alert alert-success mt-3">@DeleteSuccessMessage</div>
    }
    @if (!string.IsNullOrEmpty(DeleteErrorMessage))
    {
        <div class="alert alert-danger mt-3">@DeleteErrorMessage</div>
    }

    <hr />

    <div class="mb-3">
        <label for="jsonFileInput" class="form-label">Upload JSON File:</label>
        <InputFile OnChange="HandleFileSelected" accept=".json" />
    </div>

    @if (IsValidatingJson)
    {
        <div class="mt-3">
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: @ValidationProgress%" aria-valuenow="@ValidationProgress" aria-valuemin="0" aria-valuemax="100">@ValidationProgress%</div>
            </div>
            Validating and Uploading JSON...
        </div>
    }
    else if (IsJsonValid)
    {
        <div class="alert alert-success mt-3">@JsonInput</div>

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success mt-3">@SuccessMessage</div>
        }
        @if (!string.IsNullOrEmpty(PushErrorMessage))
        {
            <div class="alert alert-danger mt-3">@PushErrorMessage</div>
        }
    }
}

@code {
    private string EndpointUri { get; set; }
    private string PrimaryKey { get; set; }
    private bool IsConnected { get; set; }

    private string JsonInput { get; set; }
    private string ErrorMessage { get; set; }
    private string PushErrorMessage { get; set; }
    private string SuccessMessage { get; set; }
    private string DeleteErrorMessage { get; set; }
    private string DeleteSuccessMessage { get; set; }
    private bool IsJsonValid { get; set; }
    private string partitionKeyPath;

    private bool IsValidatingJson { get; set; } = false;
    private int ValidationProgress { get; set; } = 0;

    private List<string> Databases = new List<string>();
    private List<string> Containers = new List<string>();

    private string selectedDatabase;
    public string SelectedDatabase
    {
        get => selectedDatabase;
        set
        {
            if (selectedDatabase != value)
            {
                selectedDatabase = value;
                _ = OnDatabaseChange();
            }
        }
    }

    private string selectedContainer;
    public string SelectedContainer
    {
        get => selectedContainer;
        set
        {
            if (selectedContainer != value)
            {
                selectedContainer = value;
                _ = OnContainerChange();
            }
        }
    }

    private bool CanPushToCosmos => IsConnected && !string.IsNullOrEmpty(SelectedDatabase) && !string.IsNullOrEmpty(SelectedContainer);
    private bool CanDeleteItems => IsConnected && !string.IsNullOrEmpty(SelectedDatabase) && !string.IsNullOrEmpty(SelectedContainer);

    private async Task ConnectToCosmosDb()
    {
        ErrorMessage = null;
        IsConnected = false;

        if (string.IsNullOrEmpty(EndpointUri) || string.IsNullOrEmpty(PrimaryKey))
        {
            ErrorMessage = "Please provide both Endpoint URI and Primary Key.";
            return;
        }

        try
        {
            CosmosDbService.Initialize(EndpointUri, PrimaryKey);
            await LoadDatabasesAsync();
            IsConnected = true;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to connect to Cosmos DB: {ex.Message}";
        }
    }

    private async Task LoadDatabasesAsync()
    {
        try
        {
            Databases = await CosmosDbService.GetDatabasesAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load databases: {ex.Message}";
        }
    }

    private async Task OnDatabaseChange()
    {
        Containers.Clear();
        SelectedContainer = null;
        partitionKeyPath = null;

        if (string.IsNullOrEmpty(SelectedDatabase))
        {
            return;
        }

        try
        {
            Containers = await CosmosDbService.GetContainersAsync(SelectedDatabase);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load containers: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task OnContainerChange()
    {
        partitionKeyPath = null;

        if (string.IsNullOrEmpty(SelectedContainer) || string.IsNullOrEmpty(SelectedDatabase))
        {
            return;
        }

        try
        {
            partitionKeyPath = await CosmosDbService.GetPartitionKeyPathAsync(SelectedDatabase, SelectedContainer);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to get partition key path: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        ErrorMessage = null;
        PushErrorMessage = null;
        SuccessMessage = null;
        IsJsonValid = false;
        JsonInput = null;

        var file = e.File;
        if (file == null)
        {
            ErrorMessage = "No file selected.";
            return;
        }

        if (!CanPushToCosmos)
        {
            ErrorMessage = "Please ensure you have selected a database and container.";
            return;
        }

        IsValidatingJson = true;
        ValidationProgress = 0;
        StateHasChanged();

        try
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 500 * 1024 * 1024);
            using var streamReader = new StreamReader(stream);
            using var jsonReader = new JsonTextReader(streamReader);

            var serializer = new JsonSerializer();

            List<JObject> batch = new List<JObject>();
            int batchSize = 100;
            int totalDocuments = 0;

            string partitionKeyPropertyName = partitionKeyPath.TrimStart('/');

            while (await jsonReader.ReadAsync())
            {
                if (jsonReader.TokenType == JsonToken.StartObject)
                {
                    JObject obj = await JObject.LoadAsync(jsonReader);

                    // Ensure the partition key exists
                    if (!obj.ContainsKey(partitionKeyPropertyName))
                    {
                        throw new Exception($"JSON objects must include the partition key property '{partitionKeyPropertyName}'.");
                    }

                    var partitionKeyValue = obj[partitionKeyPropertyName]?.ToString();

                    if (string.IsNullOrEmpty(partitionKeyValue))
                    {
                        throw new Exception($"Partition key property '{partitionKeyPropertyName}' cannot be null or empty.");
                    }

                    // Ensure the 'id' exists
                    if (!obj.ContainsKey("id") || string.IsNullOrEmpty(obj["id"]?.ToString()))
                    {
                        obj["id"] = Guid.NewGuid().ToString();
                    }

                    batch.Add(obj);

                    if (batch.Count >= batchSize)
                    {
                        await CosmosDbService.UploadDocumentsAsync(SelectedDatabase, SelectedContainer, batch);
                        totalDocuments += batch.Count;
                        batch.Clear();
                    }
                }

                ValidationProgress = (int)((double)stream.Position / file.Size * 100);
                StateHasChanged();
            }

            if (batch.Count > 0)
            {
                await CosmosDbService.UploadDocumentsAsync(SelectedDatabase, SelectedContainer, batch);
                totalDocuments += batch.Count;
            }

            JsonInput = $"Data pushed to Cosmos DB successfully. Total documents uploaded: {totalDocuments}.";
            SuccessMessage = "Data pushed to Cosmos DB successfully.";
            IsJsonValid = true;
        }
        catch (JsonReaderException ex)
        {
            ErrorMessage = $"Invalid JSON: {ex.Message}";
        }
        catch (CosmosException ex)
        {
            ErrorMessage = $"Cosmos DB Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsValidatingJson = false;
            StateHasChanged();
        }
    }

    private async Task DeleteAllItems()
    {
        DeleteErrorMessage = null;
        DeleteSuccessMessage = null;

        if (!CanDeleteItems)
        {
            DeleteErrorMessage = "Please select a database and container.";
            return;
        }

        try
        {
            await CosmosDbService.DeleteAllItemsAsync(SelectedDatabase, SelectedContainer);
            DeleteSuccessMessage = "All items in the container have been deleted successfully.";
        }
        catch (Exception ex)
        {
            DeleteErrorMessage = $"An error occurred while deleting items: {ex.Message}";
        }
    }
}
